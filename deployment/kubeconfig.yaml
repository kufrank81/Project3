apiVersion: v1
kind: Service
metadata:
  name: user-service
  labels:
    app: user
    tier: backend-service
spec:
  ports:
  - port: 8080
    targetPort: 8080
#selector:
 # app: user
  #tier: backend-service
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: user-service
spec:
  selector:
    matchLabels: 
      app: user
      tier: backend-service
  replicas: 2
  template:
    metadata:
      labels:
        app: user
        tier: backend-service
    spec:
      containers:
      - name: user-service
        image: kufrank81/user-service:latest
        imagePullPolicy: Always
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
        ports:
        - containerPort: 8080
        env:
        - name: POSTGRES_HOST
          valueFrom:
            secretKeyRef:
              name: database-credentials
              key: POSTGRES_HOST
        - name: POSTGRES_DATABASE
          valueFrom:
            secretKeyRef:
              name: database-credentials
              key: POSTGRES_DATABASE
        - name: POSTGRES_USERNAME
          valueFrom:
            secretKeyRef:
              name: database-credentials
              key: POSTGRES_USERNAME
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: database-credentials
              key: POSTGRES_PASSWORD
        - name: AWS_PROFILE
          valueFrom:
            secretKeyRef:
              name: aws-secrets
              key: AWS_PROFILE
        - name: AWS_REGION
          valueFrom:
            secretKeyRef:
              name: aws-secrets
              key: AWS_REGION
        - name: AWSMEDIABUCKET
          valueFrom:
            secretKeyRef:
              name: aws-secrets
              key: AWSMEDIABUCKET
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: jwt-secrets
              key: JWT_SECRET
---
apiVersion: v1
kind: Service
metadata:
  name: feed-service
  labels:
    app: feed
    tier: backend-service
spec:
  ports:
  - port: 8080
    targetPort: 8080
#selector:
#  app: feed
#  tier: backend-service
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: feed-service
spec:
  selector:
    matchLabels: 
      app: feed
      tier: backend-service
  replicas: 2
  template:
    metadata:
      labels:
        app: feed
        tier: backend-service
    spec:
      containers:
      - name: feed-service
        image: kufrank81/feed-service:latest
        imagePullPolicy: Always
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
        ports:
        - containerPort: 8080
        env:
        - name: POSTGRES_HOST
          valueFrom:
            secretKeyRef:
              name: database-credentials
              key: POSTGRES_HOST
        - name: POSTGRES_DATABASE
          valueFrom:
            secretKeyRef:
              name: database-credentials
              key: POSTGRES_DATABASE
        - name: POSTGRES_USERNAME
          valueFrom:
            secretKeyRef:
              name: database-credentials
              key: POSTGRES_USERNAME
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: database-credentials
              key: POSTGRES_PASSWORD
        - name: AWS_PROFILE
          valueFrom:
            secretKeyRef:
              name: aws-secrets
              key: AWS_PROFILE
        - name: AWS_REGION
          valueFrom:
            secretKeyRef:
              name: aws-secrets
              key: AWS_REGION
        - name: AWSMEDIABUCKET
          valueFrom:
            secretKeyRef:
              name: aws-secrets
              key: AWSMEDIABUCKET
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: jwt-secrets
              key: JWT_SECRET
---
apiVersion: v1
kind: Service
metadata:
  name: front-end-service
  labels:
    app: front-end
    tier: front-end-service
spec:
  ports:
  - port: 8100
    targetPort: 8100
  #type: LoadBalancer
#selector:
#  app: front-end
#  tier: front-end-service
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: front-end-service
spec:
  selector:
    matchLabels: 
      app: front-end
      tier: front-end-service
  replicas: 2
  template:
    metadata:
      labels:
        app: front-end
        tier: front-end-service
    spec:
      containers:
      - name: front-end-service
        image: kufrank81/front-end-service:latest
        imagePullPolicy: Always
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
        ports:
        - containerPort: 8100
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  namespace: default
  name: ingress-front-end-service
  annotations:
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
spec:
  rules:
    - http:
        paths:
          - path: /*
            backend:
              serviceName: front-end-service
              servicePort: 8100
---
apiVersion: v1
kind: Service
metadata:
  name: reverseproxy
  labels:
    app: reverseproxy
    tier: proxy-service
spec:
  ports:
  - name: "8080"
    port: 8080
    targetPort: 8080
  type: LoadBalancer
  #selector:
  #  service: reverseproxy
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: reverseproxy
spec:
  selector:
    matchLabels: 
      app: reverseproxy
      tier: proxy-service
  replicas: 2
  template:
    metadata:
      labels:
        app: reverseproxy
        tier: proxy-service
    spec:
      containers:
      - name: reverseproxy
        image: kufrank81/udagram-reverse-proxy:latest
        imagePullPolicy: Always
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
        ports:
        - containerPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: load-balancer-service
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: nlb-ip
spec:
  ports:
    - port: 80
      targetPort: 80
      protocol: TCP
  type: LoadBalancer
  selector:
    app: front-end